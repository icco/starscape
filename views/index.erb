<!doctype html>
<html>
  <head>
    <title>Starscape</title>
  </head>
  <body>
    <script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.js"></script>
    <script>
      var VOICE_COUNT = 1;
      var context = new AudioContext();
      d3.json("/stars.json", function(error, json) {
        if (error) return console.warn(error);

        var i = 0;
        window.setInterval(function () {
          k = Object.keys(json)[i];
          j = 0
            var sample = new ProceduralSample(json[k][j].x, json[k][j].y, json[k][j].lum);
            sample.play();
          i += 1;
          i %= Object.keys(json).length;
        }, 500);
      });

      function WhiteNoiseGenerated(height, width, callback) {
        // Generate a 5 second white noise buffer.
        var lengthInSamples = 5 * context.sampleRate;
        var buffer = context.createBuffer(1, lengthInSamples, context.sampleRate);
        var data = buffer.getChannelData(0);

        for (var i = 0; i < lengthInSamples; i++) {
          // data[i] = (width / height);
          data[i] = ((width % 2) - 1);
        }
        console.log(data);

        // Create a source node from the buffer.
        this.node = context.createBufferSource();
        this.node.buffer = buffer;
        this.node.loop = true;
        this.node[this.node.start ? 'start' : 'noteOn'](0);
      }

      WhiteNoiseGenerated.prototype.connect = function(dest) {
        this.node.connect(dest);
      }

      function Envelope() {
        this.node = context.createGain()
        this.node.gain.value = 0;
      }

      Envelope.prototype.addEventToQueue = function() {
        this.node.gain.linearRampToValueAtTime(0, context.currentTime);
        this.node.gain.linearRampToValueAtTime(1, context.currentTime + 0.001);
        this.node.gain.linearRampToValueAtTime(0.3, context.currentTime + 0.101);
        this.node.gain.linearRampToValueAtTime(0, context.currentTime + 0.500);
      };

      Envelope.prototype.connect = function(dest) {
        this.node.connect(dest);
      };

      function ProceduralSample(height, width, size) {
        this.voices = [];
        this.voiceIndex = 0;
        this.height = height;
        this.width = width;
        this.size = size;

        this.noise = new WhiteNoiseGenerated(this.height, this.width);
        this.onLoaded();
      }

      ProceduralSample.prototype.play = function() {
        this.voiceIndex = (this.voiceIndex + 1) % VOICE_COUNT;
        this.voices[this.voiceIndex].addEventToQueue()
      };

      ProceduralSample.prototype.onLoaded = function() {
        var filter = context.createBiquadFilter();
        filter.type = 0;
        filter.Q.value = 1;
        filter.frequency.value = 800;

        // Initialize multiple voices.
        for (var i = 0; i < VOICE_COUNT; i++) {
          var voice = new Envelope();
          this.noise.connect(voice.node);
          voice.connect(filter);
          this.voices.push(voice);
        }

        var gainMaster = context.createGain();
        gainMaster.gain.value = Math.floor(this.size % 10);
        filter.connect(gainMaster);

        gainMaster.connect(context.destination);
      };

    </script>
  </body>
</html>
